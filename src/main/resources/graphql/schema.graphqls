type User {
    id: ID!
    email: String!
    role: String!
}

type Addiction{
    id:ID!
    name:String!
    startDate:String
    user:User!
    cravingsLog:[CravingsLog]
    milestones:[Milestone]
    healthBenefits:[HealthBenefit]

}

type CravingsLog {
    id: ID!
    timestamp: String
    notes: String
    cravingType: String
    intensity: Int
    addiction: Addiction!
}

type Milestone {
    id: ID!
    milestoneName: String
    targetDate: String
    isAchieved: Boolean
    addiction: Addiction!
}

type HealthBenefit {
    id: ID!
    description: String
    achievedDate: String
    addiction: Addiction!
}

type AuthResponse {
    token: String!
    userId: ID!
    email: String!
    role: String!
}

type Query {
    me: User
    getAddictions: [Addiction] # Get all addictions for the authenticated user
    getCravingsLogById(id: ID!): CravingsLog
    getUserCravings: [CravingsLog] # Get cravings logs for the authenticated user
    getMilestones(addictionId: ID!): [Milestone]
    getHealthBenefits(addictionId: ID!): [HealthBenefit]
}

type Mutation {
    registerUser(email: String!, password: String!, role: String!): AuthResponse
    loginUser(email: String!, password: String!): AuthResponse
    addAddiction(name: String!, startDate: String): Addiction # Add an addiction for the authenticated user
    logCravings(timestamp: String!, notes: String, cravingType: String!, intensity: Int!, addictionId: ID!): CravingsLog
    deleteCravingsLog(id: ID!): String
    addMilestone(addictionId: ID!, milestoneName: String!, targetDate: String): Milestone
    updateMilestone(milestoneId: ID!, isAchieved: Boolean, targetDate: String): Milestone
    addHealthBenefit(addictionId: ID!, description: String!, achievedDate: String): HealthBenefit
}
